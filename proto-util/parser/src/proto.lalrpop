use crate::{ast, lexer};

grammar<'input>(input: &'input str);

extern {
    type Location = usize;
    type Error = lexer::LexicalError<'input>;

    enum lexer::Token<'input> {
        SingleLineComment => lexer::Token::SingleLineComment(<&'input str>),
        MultiLineComment => lexer::Token::MultiLineComment(<&'input str>),

        Eq => lexer::Token::Eq,
        Colon => lexer::Token::Colon,
        Semicolon => lexer::Token::Semicolon,
        Comma => lexer::Token::Comma,
        Period => lexer::Token::Period,

        OpenPth => lexer::Token::OpenPth,
        ClosePth => lexer::Token::ClosePth,
        OpenBracket => lexer::Token::OpenBracket,
        CloseBracket => lexer::Token::CloseBracket,
        OpenBrace => lexer::Token::OpenBrace,
        CloseBrace => lexer::Token::CloseBrace,
        OpenAngle => lexer::Token::OpenAngle,
        CloseAngle => lexer::Token::CloseAngle,

        Boolean => lexer::Token::Boolean(<bool>),
        Integer => lexer::Token::Integer(<i64>),
        String => lexer::Token::String(<&'input str>),

        Ident => lexer::Token::Ident(<&'input str>),

        "to" => lexer::Token::To,
        "max" => lexer::Token::Max,
        "syntax" => lexer::Token::Syntax,
        "option" => lexer::Token::Option,
        "package" => lexer::Token::Package,
        "import" => lexer::Token::Import,
        "message" => lexer::Token::Message,
        "oneof" => lexer::Token::OneOf,
        "extend" => lexer::Token::Extend,
        "enum" => lexer::Token::Enum,
        "reserved" => lexer::Token::Reserved,
        "extensions" => lexer::Token::Extensions,
        "optional" => lexer::Token::Optional,
        "required" => lexer::Token::Required,
        "repeated" => lexer::Token::Repeated,
        "map" => lexer::Token::Map,
    }
}


// Protocol Buffers 2 and 3 keywords.

#[inline]
Keyword: &'input str = { FieldTypeKeyword, NonFieldTypeKeyword };

FieldTypeKeyword: &'input str = {
    "to" => "to",
    "max" => "max",
    "syntax" => "syntax",
    "package" => "package",
    "import" => "import",
};

NonFieldTypeKeyword: &'input str = {
    "option" => "option",
    "message" => "message",
    "oneof" => "oneof",
    "extend" => "extend",
    "enum" => "enum",
    "reserved" => "reserved",
    "extensions" => "extensions",
    "optional" => "optional",
    "required" => "required",
    "repeated" => "repeated",
    "map" => "map",
};

#[inline]
IdentLike = { Keyword, Ident };


// [.]optional.package

#[inline]
Path = { SafePath, UnsafePath }

#[inline]
LPath = { SafeLPath, UnsafePath };

// Use-case         Unsafe  Safe
// ident.ident               ++
// keyword.ident      ++
UnsafePath: &'input str = <l:@L> Keyword  (Period IdentLike)* <r:@R> => &input[l..r];
  SafePath: &'input str = <l:@L> Ident    (Period IdentLike)* <r:@R> => &input[l..r];

//                  Unsafe  Safe
//    ident.ident            ++
// .  ident.ident            ++
//   keyword.ident    ++
// . keyword.ident           ++
#[inline] UnsafeLPath : &'input str = UnsafePath;
            SafeLPath : &'input str = {
    <l:@L> Period   UnsafePath  <r:@R> => &input[l..r],
    <l:@L> Period?  SafePath    <r:@R> => &input[l..r],
};

Range: ast::Range = {
    Integer                             => ast::Range::from(<>),
    <start:Integer> "to" <end:Integer>  => ast::Range::from(start..end),
    <start:Integer> "to" <end:"max">    => ast::Range::from((start, ())),
};


// Lists

// value, value, value
CommaList<T>: Vec<T> = <first:T> <mut rest:(Comma <T>)*> => { rest.insert(0, first); rest };

// value, value, value[,]
TrailingCommaList<T>: Vec<T> = <first:T> <mut rest:(Comma <T>)*> Comma? => { rest.insert(0, first); rest };

// stmt[;] stmt[;] stmt[;]
StmtList<T>: Vec<T> = <v:(<T> Semicolon?)*> => <>;

// <keyword:K> <ident-type:I> {
//     <stmt:E>[;]
//     <stmt:E>[;]
//     <stmt:E>[;]
// }
Block<K, I, E> = K <I> OpenBrace <StmtList<E>> CloseBrace;


// Protocol Buffers file AST

pub File: ast::File<'input> = StmtList<FileEntryStmt>;

FileEntryStmt: ast::FileEntry<'input> = {
    CommentStmt                         => ast::FileEntry::Comment(<>),
       "syntax" Eq   <String> Semicolon => ast::FileEntry::Syntax(<>),
      "package"        <Path> Semicolon => ast::FileEntry::Package(<>),
       "import"      <String> Semicolon => ast::FileEntry::Import(<>),
     OptionStmt                         => ast::FileEntry::Option(<>),
    MessageStmt                         => ast::FileEntry::Message(<>),
     ExtendStmt                         => ast::FileEntry::Extend(<>),
       EnumStmt                         => ast::FileEntry::Enum(<>),
};


// comment

CommentStmt: ast::Comment<'input> = {
    SingleLineComment => ast::Comment::single_line(<>),
     MultiLineComment => ast::Comment::multi_line(<>),
};


// option

OptionStmt = "option" <Option> Semicolon;
OptionListStmt: Vec<ast::Option<'input>> = <(OpenBracket <CommaList<Option>> CloseBracket)?> => <>.unwrap_or(vec![]);

Option: ast::Option<'input>= <key:OptionKey> Eq <value:MapValue> => ast::Option { key, value };

OptionKey: &'input str = {
    <l:@L> OpenPth LPath ClosePth <r:@R> => &input[l..r],
    Path,
}

MapValue: ast::MapValue<'input> = {
    Boolean     => ast::MapValue::Boolean(<>),
    Integer     => ast::MapValue::Integer(<>),
    Ident       => ast::MapValue::Ident(<>),
    String      => ast::MapValue::String(<>),
    JSONLikeMap => ast::MapValue::Map(<>),
};

JSONLikeMap: ast::JSONLikeMap<'input>
    = OpenBrace <TrailingCommaList<(<Ident> Colon <MapValue>)>> CloseBrace
    => ast::JSONLikeMap::<'input>::from_iter(<>);


// message [ident] { ... }

MessageStmt: ast::Message<'input> = Block<"message", IdentLike, MessageEntry> => ast::Message { ident: <>.0, entries: <>.1 };

MessageEntry: ast::MessageEntry<'input> = {
            CommentStmt => ast::MessageEntry::Comment(<>),
             OptionStmt => ast::MessageEntry::Option(<>),
            MessageStmt => ast::MessageEntry::Message(<>),
               EnumStmt => ast::MessageEntry::Enum(<>),
             ExtendStmt => ast::MessageEntry::Extend(<>),
              FieldStmt => ast::MessageEntry::Field(<>),
              OneOfStmt => ast::MessageEntry::OneOf(<>),
    ReservedIndicesStmt => ast::MessageEntry::ReservedIndices(<>),
     ReservedIdentsStmt => ast::MessageEntry::ReservedIdents(<>),
         ExtensionsStmt => ast::MessageEntry::Extensions(<>),
};

// [mod] [type] [ident] = [index];
FieldStmt: ast::Field<'input> = {
    <modifier:FieldModifier>

    <r#type:UnsafeFieldType>    <ident:IdentLike> Eq <index:Integer> <options:OptionListStmt> Semicolon
        => ast::Field { modifier, r#type, ident, index, options },

    <r#type:SafeFieldType>      <ident:IdentLike> Eq <index:Integer> <options:OptionListStmt> Semicolon
        => ast::Field { modifier: ast::FieldModifier::None, r#type, ident, index, options },
};

FieldModifier: ast::FieldModifier = {
    "optional" => ast::FieldModifier::Optional,
    "required" => ast::FieldModifier::Required,
    "repeated" => ast::FieldModifier::Repeated,
};

//           Use-case              SafeFieldType  UnsafeFieldType
// [mod]    path            ...         N/A             +
// [mod]   .path            ...         N/A             +
// [mod]    keyword.path    ...         N/A             +
// [mod]   .keyword.path    ...         N/A             +
//          path            ...          +             N/A
//         .path            ...          +             N/A
//          keyword.path    ...                        N/A
//         .keyword.path    ...          +             N/A
#[inline] SafeFieldType   : &'input str = { MapFieldType, SafeLPath, FieldTypeKeyword   };
#[inline] UnsafeFieldType : &'input str = { MapFieldType, LPath                         };

MapFieldType: &'input str = <l:@L> "map" OpenAngle Ident Comma IdentLike CloseAngle <r:@R> => &input[l..r];


// reserved 2, 3, 4 to 6;

ReservedIndicesStmt: Vec<ast::Range> = "reserved" <CommaList<Range>> Semicolon;


// reserved "xd", "xdd";

ReservedIdentsStmt: Vec<&'input str> = "reserved" <CommaList<String>> Semicolon;


// extensions 1000 to max;

ExtensionsStmt: Vec<ast::Range> = "extensions" <CommaList<Range>> Semicolon;


// oneof [ident] { ... }

OneOfStmt: ast::OneOf<'input> = Block<"oneof", IdentLike, OneOfEntry> => ast::OneOf { ident: <>.0, entries: <>.1 };

OneOfEntry: ast::OneOfEntry<'input> = {
    CommentStmt => ast::OneOfEntry::Comment(<>),
     OptionStmt => ast::OneOfEntry::Option(<>),
      FieldStmt => ast::OneOfEntry::Field(<>),
};


// extend [ident] { ... }

ExtendStmt: ast::Extend<'input> = Block<"extend", LPath, ExtendEntry> => ast::Extend { r#type: <>.0, entries: <>.1 };

ExtendEntry: ast::ExtendEntry<'input> = {
    CommentStmt => ast::ExtendEntry::Comment(<>),
      FieldStmt => ast::ExtendEntry::Field(<>),
};


// enum [ident] { ... }

EnumStmt: ast::Enum<'input> = Block<"enum", IdentLike, EnumEntry> => ast::Enum { ident: <>.0, entries: <>.1 };

EnumEntry: ast::EnumEntry<'input> = {
     CommentStmt => ast::EnumEntry::Comment(<>),
      OptionStmt => ast::EnumEntry::Option(<>),
    EnumPairStmt,
};

EnumPairStmt: ast::EnumEntry<'input>
    = <ident:IdentLike> Eq <value:Integer> <options:OptionListStmt> Semicolon
    => ast::EnumEntry::Pair{ ident, value, options };